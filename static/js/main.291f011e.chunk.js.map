{"version":3,"sources":["components/Cards.js","App.js","serviceWorker.js","index.js"],"names":["Cards","this","props","name","location","email","phone","className","Component","App","state","users","loaded","fetch","then","response","json","setState","map","user","key","id","address","city","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"sTAkCeA,E,uKAzBD,IAAD,EACoCC,KAAKC,MAAtCC,EADH,EACGA,KAAMC,EADT,EACSA,SAAUC,EADnB,EACmBA,MAAOC,EAD1B,EAC0BA,MAC3B,OACI,yBAAKC,UAAU,SACX,yBAAKA,UAAU,qBACX,kBAAC,IAAD,CAAWA,UAAU,cACrB,wBAAIA,UAAU,aAAaJ,IAE/B,yBAAKI,UAAU,wBACX,gCAAQ,kBAAC,IAAD,CAAcA,UAAU,UAChC,uBAAGA,UAAU,iBAAiBH,IAElC,yBAAKG,UAAU,wBACX,gCAAQ,kBAAC,IAAD,CAASA,UAAU,UAC3B,uBAAGA,UAAU,cAAcF,IAE/B,yBAAKE,UAAU,wBACX,gCAAQ,kBAAC,IAAD,CAASA,UAAU,UAC3B,uBAAGA,UAAU,cAAcD,S,GAnB/BE,aCwCLC,G,wDA1Cb,WAAYP,GAAO,IAAD,8BAChB,cAAMA,IACDQ,MAAQ,CACTC,MAAO,GACPC,QAAQ,GAJI,E,gEAQG,IAAD,OAEhBC,MADY,8CAEPC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAE,GACF,EAAKC,SAAS,CACVL,QAAQ,EACRD,MAAOK,S,+BAKd,IAAD,EACoBf,KAAKS,MAAvBC,EADF,EACEA,MACR,OAFM,EACSC,OAKX,yBAAKL,UAAU,OACZI,EAAMO,KAAI,SAAAC,GAAI,OACb,kBAAC,EAAD,CACAC,IAAKD,EAAKE,GACVlB,KAAMgB,EAAKhB,KACXC,SAAUe,EAAKG,QAAQC,KACvBlB,MAAOc,EAAKd,MACZC,MAAOa,EAAKb,YAVX,+C,GAxBKE,cCOEgB,QACW,cAA7BC,OAAOrB,SAASsB,UAEe,UAA7BD,OAAOrB,SAASsB,UAEhBD,OAAOrB,SAASsB,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBrB,MAAK,SAAAsB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.291f011e.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './Cards.css';\nimport { FaUserAlt } from 'react-icons/fa';\nimport { FaPhone } from 'react-icons/fa';\nimport { MdLocationOn } from 'react-icons/md';\nimport { MdEmail } from 'react-icons/md';\n\n\nclass Cards extends Component {\n    render() {\n        const { name, location, email, phone } = this.props;\n            return(\n                <div className='cards'>\n                    <div className='user-name-wrapper'>\n                        <FaUserAlt className='user-icon' />\n                        <h4 className='user-name'>{name}</h4>\n                    </div>\n                    <div className='user-section-wrapper'>\n                        <button><MdLocationOn className='icon'/></button>\n                        <p className='user-location'>{location}</p>\n                    </div>\n                    <div className='user-section-wrapper'>\n                        <button><MdEmail className='icon' /></button>\n                        <p className='user-email'>{email}</p>\n                    </div>\n                    <div className='user-section-wrapper'>\n                        <button><FaPhone className='icon' /></button>\n                        <p className='user-phone'>{phone}</p> \n                    </div>\n                </div>\n                   \n                )\n        }\n}\nexport default Cards","import React, { Component } from 'react';\nimport Cards from './components/Cards';\nimport './App.css'\n\n\nclass App extends Component {\n  constructor(props){\n    super(props);\n    this.state = {\n        users: [],\n        loaded: false,\n    }\n  }\n\n  componentDidMount() {\n      const url = \"https://jsonplaceholder.typicode.com/users\";\n      fetch(url)\n          .then(response => response.json())\n          .then(json => {\n              this.setState({\n                  loaded: true,\n                  users: json,\n              })\n      });\n  }\n  \n  render(){\n    const { users, loaded } = this.state;\n    if(!loaded){\n      return <div>Loading...</div>\n    }else{\n      return (\n        <div className=\"App\">\n          {users.map(user => (\n            <Cards \n            key={user.id}\n            name={user.name}\n            location={user.address.city}\n            email={user.email}\n            phone={user.phone}\n            />\n        ))}\n        </div>\n      );\n    }\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}